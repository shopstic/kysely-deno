import { ColumnType, Generated, Kysely } from "https://esm.sh/kysely@0.22.0";

export interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  firstName: string;
  gender: "male" | "female" | "other";

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  lastName: string | null;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, Date, never>;
}

export interface PetTable {
  id: Generated<number>;
  name: string;
  ownerId: number;
  species: "dog" | "cat";
}

export interface MovieTable {
  id: Generated<string>;
  stars: number;
}

// Keys of this interface are table names.
export interface Database {
  person: PersonTable;
  pet: PetTable;
  movie: MovieTable;
}

export async function upSqlite(db: Kysely<unknown>): Promise<void> {
  await db.schema
    .createTable("person")
    .addColumn("id", "integer", (c) => c.primaryKey().autoIncrement())
    .addColumn("firstName", "text", (c) => c.notNull())
    .addColumn("lastName", "text")
    .addColumn("gender", "text", (c) => c.notNull())
    .addColumn("createdAt", "text", (c) => c.notNull())
    .execute();

  await db.schema
    .createTable("pet")
    .addColumn("id", "integer", (c) => c.primaryKey().autoIncrement())
    .addColumn("name", "text", (c) => c.notNull().unique())
    .addColumn(
      "ownerId",
      "integer",
      (c) => c.references("person.id").onDelete("cascade").notNull(),
    )
    .addColumn("species", "text", (c) => c.notNull())
    .execute();

  await db.schema
    .createIndex("pet_owner_id_index")
    .on("pet")
    .column("ownerId")
    .execute();
}

export async function upPostgres(db: Kysely<unknown>): Promise<void> {
  await db.schema
    .createTable("person")
    .addColumn("id", "serial", (c) => c.primaryKey())
    .addColumn("firstName", "varchar", (c) => c.notNull())
    .addColumn("lastName", "varchar")
    .addColumn("gender", "varchar(50)", (c) => c.notNull())
    .addColumn("createdAt", "timestamp", (c) => c.notNull())
    .execute();

  await db.schema
    .createTable("pet")
    .addColumn("id", "serial", (c) => c.primaryKey())
    .addColumn("name", "varchar", (c) => c.notNull().unique())
    .addColumn(
      "ownerId",
      "integer",
      (c) => c.references("person.id").onDelete("cascade").notNull(),
    )
    .addColumn("species", "varchar", (c) => c.notNull())
    .execute();

  await db.schema
    .createIndex("pet_owner_id_index")
    .on("pet")
    .column("ownerId")
    .execute();
}

export async function run(db: Kysely<Database>) {
  const result = await db.transaction().execute(async (tx) => {
    await tx
      .deleteFrom("person")
      .where((q) =>
        q
          .where("firstName", "!=", "foo")
          .where("lastName", "!=", "bar")
          .orWhere((q) =>
            q
              .where("firstName", "!=", "foo")
              .where("lastName", "!=", "bar")
          )
      )
      .execute();

    const { id } = await tx
      .insertInto("person")
      .values({
        firstName: "Jennifer",
        lastName: "Lawrence",
        gender: "female",
        createdAt: new Date(),
      })
      .returning("id")
      .executeTakeFirstOrThrow();

    console.log("OWNER ID", id);
    // await delay(1000);

    await tx
      .insertInto("pet")
      .values([{ name: "Catto", species: "cat", ownerId: id }, {
        name: "Doggo",
        species: "dog",
        ownerId: id,
      }])
      .execute();

    const people = await tx
      .selectFrom("person")
      .innerJoin("pet", "pet.ownerId", "person.id")
      // .selectAll()
      .select(["firstName", "pet.name as petName", "createdAt"])
      .where("person.id", "=", id)
      .execute();

    return people;
  });

  result.forEach((person) => {
    console.log("person.firstName", person.firstName);
    console.log("person.petName", person.petName);
    console.log("person.createdAt", new Date(person.createdAt));
  });
}
